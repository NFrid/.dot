// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "ctrl+h",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "list.expand",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+w",
    "command": "extension.vim_ctrl+w",
    "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
  },
  {
    "key": "ctrl+w",
    "command": "-extension.vim_ctrl+w",
    "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
  },

  // open quickfix
  {
    "key": "alt+.",
    "command": "keyboard-quickfix.openQuickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+pagedown",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "alt+tab",
    "command": "workbench.action.showAllEditorsByMostRecentlyUsed"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+m",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "ctrl+m",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "ctrl+m",
    "command": "explorer.openAndPassFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "ctrl+m",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+m",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusNextSetting",
    "when": "inSettingsSearch"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusSettingControl",
    "when": "settingRowFocus"
  },
  {
    "key": "ctrl+m",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "key": "alt+n",
    "command": "explorer.newFile"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "ctrl+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+space",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+enter",
    "command": "extension.vim_ctrl+space",
    "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+space",
    "command": "-extension.vim_ctrl+space",
    "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+space",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+space",
    "command": "-toggleSuggestionDetails",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "alt+delete `",
    "command": "workbench.action.terminal.kill"
  },
  {
    "key": "l",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "shift+l",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "h",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "shift+h",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "shift+j",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  }
]
